public abstract class dev/kord/cache/tck/DataCacheVerifier {
	public fun <init> ()V
	public final fun concurrent reading and writing should be allowed ()V
	public final fun cyclical remove should not hang ()V
	public final fun delete should cascade ()V
	public final fun delete should not cascade nullable ()V
	public final fun getSerializers ()Ljava/util/Map;
	public final fun insert should be queryable ()V
	public abstract fun newCache ()Ldev/kord/cache/api/DataCache;
	public final fun removed entry should not be found ()V
	protected final fun runTestWithDataCache (Lkotlin/jvm/functions/Function2;)V
	public final fun update should modify correctly ()V
	public final fun update that changes identity throws ()V
}

protected final class dev/kord/cache/tck/DataCacheVerifier$Context : kotlinx/coroutines/CoroutineScope {
	public fun <init> (Ldev/kord/cache/api/DataCache;Lkotlinx/coroutines/CoroutineScope;)V
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
	public final fun getDatacache ()Ldev/kord/cache/api/DataCache;
	public final fun getScope ()Lkotlinx/coroutines/CoroutineScope;
}

public final class dev/kord/cache/tck/DataCacheVerifierKt {
	public static final field SHORT_DISPLAY_NAME Ljava/lang/String;
}

